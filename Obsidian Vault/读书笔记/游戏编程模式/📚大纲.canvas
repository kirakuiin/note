{
	"nodes":[
		{"id":"947fc3d2f7adda07","type":"group","x":-680,"y":-1360,"width":1640,"height":1080,"label":"核心"},
		{"id":"a7bc2aed5dbe9a76","type":"group","x":-680,"y":-200,"width":1308,"height":920,"label":"目录"},
		{"id":"3ea5f0d69e8e741f","type":"text","text":"```dataview\nLIST rows.file.link\nFROM \"读书笔记/游戏编程模式\"\nWHERE design_pattern\nGROUP BY category\n```","x":-576,"y":-115,"width":1084,"height":755},
		{"id":"66c3d0ed8c7609df","type":"text","text":"- 在游戏开发期，游戏的灵活性要大于游戏的效能。\n> [!note]\n > 游戏的灵活性越大，开发迭代速度越快，游戏便越有趣。 将一个好玩的游戏做的高效总是比将一款高效的游戏做的有趣要简单，所以使用抽象让游戏变得灵活，当其稳定后去除部分抽象提高性能。\n  \n- 原型开发是完全正确的开发实践\n> [!note]\n> 快速的开发一个个原型来验证想法，无需考虑原型的代码设计和维护，只需要能运行即可。用完一定要将其丢掉，如果确认使用则仔细设计并重新实现。\n> 一个比较良好的习惯是使用另一种语言来开发原型，这样即便你想使用，也必须用游戏语言来重新开发。\n\t \n - 保持游戏的简单性\n > [!note]\n> 使用一段代码来处理一系列共通的逻辑，事物背后是普遍联系的，找出共性来解决相似的问题而不是使用累加的**if else**。\n-  提前优化是万恶之源。\n-  如果要做一些有趣的游戏，请乐在其中。","x":-576,"y":-1280,"width":920,"height":840},
		{"id":"95f4e51687d68ff6","type":"file","file":"Excalidraw/游戏编程模式/游戏问题解决流程.md","x":440,"y":-1140,"width":480,"height":280}
	],
	"edges":[]
}